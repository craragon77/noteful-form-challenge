{"version":3,"sources":["CircleButton/CircleButton.js","notes-helpers.js","NoteListNav/NoteListNav.js","NotePageNav/NotePageNav.js","Note/Note.js","NoteListMain/NoteListMain.js","NotePageMain/NotePageMain.js","AddFolder/FolderErrorBoundries.js","AddFolder/AddFolder.js","AddNote/NoteErrorBoundries.js","AddNote/AddNote.js","App/App.js","index.js"],"names":["NavCircleButton","props","tag","className","childrenm","otherProps","Object","objectWithoutProperties","React","createElement","objectSpread","join","children","defaultProps","findNote","notes","arguments","length","undefined","noteId","find","note","id","countNotesForFolder","folderId","filter","NoteListNav","react_default","a","folders","map","folder","key","NavLink","to","concat","name","Link","type","react_fontawesome_index_es","icon","NotePageNav","role","onClick","history","goBack","Note","format","modified","NoteListMain","Note_Note","NotePageMain","content","split","para","i","FolderErrorBoundries","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","Component","AddFolder","value","handleChange","bind","assertThisInitialized","handleSubmit","newAddedFolder","e","setState","target","preventDefault","folderName","console","log","newFolder","_this2","params","method","headers","Content-Type","body","JSON","stringify","fetch","then","response","ok","Error","json","data","updateFolders","catch","_this3","FolderErrorBoundries_FolderErrorBoundries","onSubmit","htmlFor","onChange","required","NoteErrorBoundries","AddNote","selectedFolder","handleNameChange","handleContentChange","newNote","updateNotes","alert","nameValue","contentValue","time","Date","folderIdValue","testing","testingTwo","newAddedNote","NoteErrorBoundries_NoteErrorBoundries","onFolderSelect","App","newFolders","foldersClone","parse","push","handleAddNote","notesClone","getFolders","getNotes","toConsumableArray","_this4","_this$state","Fragment","path","Route","exact","render","routeProps","NoteListNav_NoteListNav","assign","match","findFolder","NotePageNav_NotePageNav","component","_this5","_this$state2","notesForFolder","getNotesForFolder","NoteListMain_NoteListMain","NotePageMain_NotePageMain","AddFolder_AddFolder_AddFolder","getRequest","AddNote_AddNote_AddNote","renderNavRoutes","renderMainRoutes","withRouter","library","add","faPlus","faChevronLeft","faTrashAlt","faCheckDouble","ReactDOM","BrowserRouter","src_App_App","document","getElementById"],"mappings":"kbAGe,SAASA,EAAgBC,GACeA,EAA7CC,IAA6CD,EAAxCE,UAAwCF,EAA7BG,UADqB,IACPC,EADOC,OAAAC,EAAA,EAAAD,CACQL,EADR,iCAG7C,OAAOO,IAAMC,cACXR,EAAMC,IADDI,OAAAI,EAAA,EAAAJ,CAAA,CAGHH,UAAW,CAAC,kBAAmBF,EAAME,WAAWQ,KAAK,MAClDN,GAELJ,EAAMW,UAIVZ,EAAgBa,aAAc,CAC5BX,IAAK,KChBA,IAGMY,EAAW,eAACC,EAADC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAO,GAAIG,EAAXH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OACtBH,EAAMK,KAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAOH,KAQpBI,EAAsB,eAACR,EAADC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAO,GAAIQ,EAAXR,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OACjCH,EAAMU,OAAO,SAAAJ,GAAI,OAAIA,EAAKG,WAAaA,IAAUP,cCLpC,SAASS,EAAYzB,GAElC,OACE0B,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,eACbwB,EAAAC,EAAAnB,cAAA,MAAIN,UAAU,qBACXF,EAAM4B,QAAQC,IAAI,SAAAC,GAAM,OACvBJ,EAAAC,EAAAnB,cAAA,MAAIuB,IAAKD,EAAOT,IACdK,EAAAC,EAAAnB,cAACwB,EAAA,EAAD,CACE9B,UAAU,2BACV+B,GAAE,WAAAC,OAAaJ,EAAOT,KAEtBK,EAAAC,EAAAnB,cAAA,QAAMN,UAAU,0BACboB,EAAoBtB,EAAMc,MAAOgB,EAAOT,KAE1CS,EAAOK,UAKhBT,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,+BACbwB,EAAAC,EAAAnB,cAACT,EAAD,CACEE,IAAKmC,IACLH,GAAG,cACHI,KAAK,SACLnC,UAAU,kCAEVwB,EAAAC,EAAAnB,cAAC8B,EAAA,EAAD,CAAiBC,KAAK,SACtBb,EAAAC,EAAAnB,cAAA,WAPF,YAeRiB,EAAYb,aAAe,CACzBgB,QAAS,WCtCI,SAASY,EAAYxC,GAClC,OACE0B,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,eACbwB,EAAAC,EAAAnB,cAACT,EAAD,CACEE,IAAI,SACJwC,KAAK,OACLC,QAAS,kBAAM1C,EAAM2C,QAAQC,UAC7B1C,UAAU,4BAEVwB,EAAAC,EAAAnB,cAAC8B,EAAA,EAAD,CAAiBC,KAAK,iBACtBb,EAAAC,EAAAnB,cAAA,WAPF,QAUCR,EAAM8B,QACLJ,EAAAC,EAAAnB,cAAA,MAAIN,UAAU,4BACXF,EAAM8B,OAAOK,OAOxBK,EAAY5B,aAAe,CACzB+B,QAAS,CACPC,OAAQ,kCCzBG,SAASC,EAAK7C,GAC3B,OACE0B,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,QACbwB,EAAAC,EAAAnB,cAAA,MAAIN,UAAU,eACZwB,EAAAC,EAAAnB,cAAC4B,EAAA,EAAD,CAAMH,GAAE,SAAAC,OAAWlC,EAAMqB,KACtBrB,EAAMmC,OAGXT,EAAAC,EAAAnB,cAAA,UAAQN,UAAU,eAAemC,KAAK,UACpCX,EAAAC,EAAAnB,cAAC8B,EAAA,EAAD,CAAiBC,KAAK,cACrB,IAFH,UAKAb,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,eACbwB,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,wBAAf,WAEG,IACDwB,EAAAC,EAAAnB,cAAA,QAAMN,UAAU,QACb4C,iBAAO9C,EAAM+C,SAAU,0BCfrB,SAASC,EAAahD,GAEnC,OACE0B,EAAAC,EAAAnB,cAAA,WAASN,UAAU,gBACjBwB,EAAAC,EAAAnB,cAAA,UACGR,EAAMc,MAAMe,IAAI,SAAAT,GAAI,OACnBM,EAAAC,EAAAnB,cAAA,MAAIuB,IAAKX,EAAKC,IACZK,EAAAC,EAAAnB,cAACyC,EAAD,CACE5B,GAAID,EAAKC,GACTc,KAAMf,EAAKe,KACXY,SAAU3B,EAAK2B,eAKvBrB,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,kCACbwB,EAAAC,EAAAnB,cAACT,EAAD,CACEE,IAAKmC,IACLH,GAAG,YACHI,KAAK,SACLnC,UAAU,iCAEVwB,EAAAC,EAAAnB,cAAC8B,EAAA,EAAD,CAAiBC,KAAK,SACtBb,EAAAC,EAAAnB,cAAA,WAPF,UAeRwC,EAAapC,aAAe,CAC1BE,MAAO,WCpCM,SAASoC,EAAalD,GACnC,OACE0B,EAAAC,EAAAnB,cAAA,WAASN,UAAU,gBACjBwB,EAAAC,EAAAnB,cAACyC,EAAD,CACE5B,GAAIrB,EAAMoB,KAAKC,GACfc,KAAMnC,EAAMoB,KAAKe,KACjBY,SAAU/C,EAAMoB,KAAK2B,WAEvBrB,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,yBACZF,EAAMoB,KAAK+B,QAAQC,MAAM,YAAYvB,IAAI,SAACwB,EAAMC,GAAP,OACxC5B,EAAAC,EAAAnB,cAAA,KAAGuB,IAAKuB,GAAID,OAOtBH,EAAatC,aAAe,CAC1BQ,KAAM,CACJ+B,QAAS,gBCtBQI,cACjB,SAAAA,EAAYvD,GAAM,IAAAwD,EAAA,OAAAnD,OAAAoD,EAAA,EAAApD,CAAAqD,KAAAH,IACdC,EAAAnD,OAAAsD,EAAA,EAAAtD,CAAAqD,KAAArD,OAAAuD,EAAA,EAAAvD,CAAAkD,GAAAM,KAAAH,KAAM1D,KACD8D,MAAQ,CACTC,UAAU,GAHAP,wEAYd,OAAIE,KAAKI,MAAMC,SAEXrC,EAAAC,EAAAnB,cAAA,+GAGGkD,KAAK1D,MAAMW,4DAVUqD,GAC5B,MAAQ,CAACD,UAAU,UATuBE,aCI7BC,cACnB,SAAAA,EAAYlE,GAAM,IAAAwD,EAAA,OAAAnD,OAAAoD,EAAA,EAAApD,CAAAqD,KAAAQ,IAChBV,EAAAnD,OAAAsD,EAAA,EAAAtD,CAAAqD,KAAArD,OAAAuD,EAAA,EAAAvD,CAAA6D,GAAAL,KAAAH,KAAM1D,KACD8D,MAAQ,CAACK,MAAO,IACvBX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAmD,KACpBA,EAAKe,aAAef,EAAKe,aAAaF,KAAlBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAmD,KACpBA,EAAKgB,eAAiBhB,EAAKgB,eAAeH,KAApBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAmD,KALJA,4EAQLiB,GACXf,KAAKgB,SAAS,CACZP,MAAOM,EAAEE,OAAOR,6CAIPM,GACXA,EAAEG,iBACF,IAAMC,EAAanB,KAAKI,MAAMK,MAC9BW,QAAQC,IAAI,uBAAyBF,GACrCnB,KAAKc,eAAeK,0CAGPG,GAAW,IAAAC,EAAAvB,KACxBoB,QAAQC,IAAIC,GACZ,IACQE,EAAS,CACbC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACrD,KAAM6C,KAE9BF,QAAQC,IAAIC,GACZS,MATgB,gCASCP,GAChBQ,KAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,yCAElB,OAAQF,EAASG,SAGlBJ,KAAK,SAAAK,GACJd,EAAKjF,MAAMgG,cAAcD,KAE1BE,MAAM,SAAAjC,uCAIA,IAAAkC,EAAAxC,KACT,OACEhC,EAAAC,EAAAnB,cAAA,WAASN,UAAU,aACjBwB,EAAAC,EAAAnB,cAAA,6BAEAkB,EAAAC,EAAAnB,cAAC2F,EAAD,KACEzE,EAAAC,EAAAnB,cAAA,QAAM4F,SAAY,SAAA3B,GAAC,OAAIyB,EAAK3B,aAAaE,KACvC/C,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,SACXwB,EAAAC,EAAAnB,cAAA,SAAO6F,QAAQ,oBAAoBlC,MAAM,QAAzC,QAGFzC,EAAAC,EAAAnB,cAAA,SAAO6B,KAAK,OAAOhB,GAAG,oBAAoBc,KAAK,oBAAoBgC,MAAOT,KAAKI,MAAMK,MAAOmC,SAAU5C,KAAKU,aAAcmC,UAAQ,KAEnI7E,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,WACbwB,EAAAC,EAAAnB,cAAA,UAAQ6B,KAAK,UAAb,yBA9DyB4B,aCJlBuC,sBACjB,SAAAA,EAAYxG,GAAM,IAAAwD,EAAA,OAAAnD,OAAAoD,EAAA,EAAApD,CAAAqD,KAAA8C,IACdhD,EAAAnD,OAAAsD,EAAA,EAAAtD,CAAAqD,KAAArD,OAAAuD,EAAA,EAAAvD,CAAAmG,GAAA3C,KAAAH,KAAM1D,KACD8D,MAAQ,CACTC,UAAU,GAHAP,wEAWd,OAAIE,KAAKI,MAAMC,SAEPrC,EAAAC,EAAAnB,cAAA,gFAGDkD,KAAK1D,MAAMW,4DAVUqD,GAC5B,MAAS,CAACD,UAAU,UARoBE,cCK3BwC,cAInB,SAAAA,EAAYzG,GAAM,IAAAwD,EAAA,OAAAnD,OAAAoD,EAAA,EAAApD,CAAAqD,KAAA+C,IAChBjD,EAAAnD,OAAAsD,EAAA,EAAAtD,CAAAqD,KAAArD,OAAAuD,EAAA,EAAAvD,CAAAoG,GAAA5C,KAAAH,KAAM1D,KACD8D,MAAQ,CACX3B,KAAM,GACNgB,QAAS,GACTuD,eAAgB,IAElBlD,EAAKmD,iBAAmBnD,EAAKmD,iBAAiBtC,KAAtBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAmD,KACxBA,EAAKoD,oBAAsBpD,EAAKoD,oBAAoBvC,KAAzBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAmD,KAC3BA,EAAKe,aAAef,EAAKe,aAAaF,KAAlBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAmD,KATJA,gFAaDiB,GACff,KAAKgB,SAAS,CACZvC,KAAMsC,EAAEE,OAAOR,oDAGCM,GAClBf,KAAKgB,SAAS,CACZvB,QAASsB,EAAEE,OAAOR,+CAGPM,GACbf,KAAKgB,SAAS,CACZgC,eAAgBjC,EAAEE,OAAOR,6CAQhB0C,GAAS,IAAA5B,EAAAvB,KAEdwB,EAAS,CACbC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUqB,IAEvBpB,MARiB,8BAQDP,GACfQ,KAAK,SAAAC,GACJ,IAAIA,EAASC,GACX,MAAM,IAAIC,MAAM,yCAElB,OAAQF,EAASG,SAElBJ,KAAK,SAAAK,GACFd,EAAKjF,MAAM8G,YAAYf,KAE1BE,MAAM,SAAAjC,GACL+C,MAAM,gFAIGtC,GACXA,EAAEG,iBAEF,IAAMoC,EAAYtD,KAAKI,MAAM3B,KACvB8E,EAAevD,KAAKI,MAAMX,QAC1B+D,EAAO,IAAIC,KACXC,EAAgB1D,KAAKI,MAAM4C,eACjC5B,QAAQC,IAAIqC,GACZ,IAAMC,EAAU,CAACL,YAAWC,eAAcC,OAAME,iBAChDtC,QAAQC,IAAI,kCAAoCiC,EAChD,uCAAyCC,EACzC,uBAAyBC,EACzB,4BAA8BE,GAC9B,IAAME,EAAa,CACjB/F,SAAY8F,EAAQD,cACpBjF,KAAQkF,EAAQL,UAChBjE,SAAYsE,EAAQH,KACpB/D,QAAWkE,EAAQJ,cAEC,KAAlBG,EACFL,MAAM,0BAENrD,KAAK6D,aAAaD,oCAWb,IAAApB,EAAAxC,KACC9B,EAAY8B,KAAK1D,MAAjB4B,QACR,OACEF,EAAAC,EAAAnB,cAAA,WAASN,UAAU,WACjBwB,EAAAC,EAAAnB,cAAA,2BAEAkB,EAAAC,EAAAnB,cAACgH,EAAD,KACE9F,EAAAC,EAAAnB,cAAA,QAAM4F,SAAY,SAAA3B,GAAC,OAAIyB,EAAK3B,aAAaE,KACvC/C,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,SACbwB,EAAAC,EAAAnB,cAAA,SAAO6F,QAAQ,mBAAf,QAGA3E,EAAAC,EAAAnB,cAAA,SAAO6B,KAAK,OAAOhB,GAAG,kBAAkBc,KAAMuB,KAAKI,MAAM3B,KAAMmE,SAAY,SAAA7B,GAAC,OAAIyB,EAAKS,iBAAiBlC,IAAI8B,UAAQ,KAEpH7E,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,SACbwB,EAAAC,EAAAnB,cAAA,SAAO6F,QAAQ,sBAAf,WAGA3E,EAAAC,EAAAnB,cAAA,YAAUa,GAAG,qBAAqB8B,QAASO,KAAKI,MAAMX,QAASmD,SAAY,SAAA7B,GAAC,OAAIyB,EAAKU,oBAAoBnC,IAAI8B,UAAQ,KAEvH7E,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,SACbwB,EAAAC,EAAAnB,cAAA,SAAO6F,QAAQ,sBAAf,UAGA3E,EAAAC,EAAAnB,cAAA,UAAQ+F,UAAQ,EAAClF,GAAG,qBAAqBiF,SAAY,SAAA7B,GAAC,OAAIyB,EAAKuB,eAAehD,IAAIiC,eAAgBhD,KAAKI,MAAM4C,gBAC3GhF,EAAAC,EAAAnB,cAAA,UAAQ2D,MAAO,MAAf,OACCvC,EAAQC,IAAI,SAAAC,GAAM,OACjBJ,EAAAC,EAAAnB,cAAA,UAAQuB,IAAKD,EAAOT,GAAI8C,MAAOrC,EAAOT,IACnCS,EAAOK,UAKhBT,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,WACbwB,EAAAC,EAAAnB,cAAA,UAAQ6B,KAAK,UAAb,uBAhIuB4B,aAAhBwC,EACZ7F,aAAe,CACpBgB,QAAS,wBCIP8F,cACJ,SAAAA,EAAY1H,GAAM,IAAAwD,EAAA,OAAAnD,OAAAoD,EAAA,EAAApD,CAAAqD,KAAAgE,IAChBlE,EAAAnD,OAAAsD,EAAA,EAAAtD,CAAAqD,KAAArD,OAAAuD,EAAA,EAAAvD,CAAAqH,GAAA7D,KAAAH,KAAM1D,KAQV8D,MAAQ,CACFhD,MAAO,GACPc,QAAS,IAXK4B,EAuFlBwC,cAAgB,SAAC2B,GACf,IAAIC,EAAgBrC,KAAKsC,MAAMtC,KAAKC,UAAUhC,EAAKM,MAAMlC,UACzDgG,EAAaE,KAAKH,GAClBnE,EAAKkB,SAAS,CACZ9C,QAASgG,GACR,WACDpE,EAAKxD,MAAM2C,QAAQmF,KAAK,QA7FVtE,EAiGlBuE,cAAgB,SAAClB,GACfrD,EAAKkB,SAAS,CACZrD,GAAM,GACNc,KAAQ,GACRL,OAAU,GACVqB,QAAW,MAtGGK,EA0GlBsD,YAAc,SAACD,GACb,IAAImB,EAAazC,KAAKsC,MAAMtC,KAAKC,UAAUhC,EAAKM,MAAMhD,QACtDkH,EAAWF,KAAKjB,GAChBrD,EAAKkB,SAAS,CACT5D,MAAOkH,GACT,WACCxE,EAAKxD,MAAM2C,QAAQmF,KAAK,QA3G5BtE,EAAKwC,cAAgBxC,EAAKwC,cAAc3B,KAAnBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAmD,KACrBA,EAAKsD,YAActD,EAAKsD,YAAYzC,KAAjBhE,OAAAiE,EAAA,EAAAjE,QAAAiE,EAAA,EAAAjE,CAAAmD,KANHA,mFAcC,IAAAyB,EAAAvB,KACjB+B,MAAM,iCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAK,GACJ,IAAMkC,EAAalC,EACnBd,EAAKP,SAAS,CACZ9C,QAASqG,MAGZhC,MAAM,SAAAjC,GACLc,QAAQC,IAAI,2DAEdU,MAAM,+BACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAK,GACJ,IAAMmC,EAAWnC,EACjBd,EAAKP,SAAS,CACZ5D,MAAOoH,MAGVjC,MAAM,SAAAjC,GACLc,QAAQC,IAAI,uDACZD,QAAQC,IAAIf,0CAIL6C,GAAS,IAAAX,EAAAxC,KAEdwB,EAAS,CACbC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUqB,IAEvBpB,MARiB,8BAQDP,GACfQ,KAAK,SAAAC,GACJ,IAAIA,EAASC,GACX,MAAM,IAAIC,MAAM,yCAElB,OAAQF,EAASG,SAElBJ,KAAK,SAAAK,GACJG,EAAKxB,SAAS,CAACtD,KAAKf,OAAA8H,EAAA,EAAA9H,CAAK6F,EAAKpC,MAAMhD,OAAjBoB,OAAA,CAAwB6D,QAE5CL,KAAK,SAAAjB,GACFyB,EAAKlG,MAAM2C,QAAQmF,KAAK,UAE3B7B,MAAM,SAAAjC,GACL+C,MAAM,kFAIK/B,GAAW,IAAAoD,EAAA1E,KAEhBwB,EAAS,CACbC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUR,IAEvBS,MARgB,gCAQCP,GAChBQ,KAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,yCAElB,OAAQF,EAASG,SAElBJ,KAAK,SAAAK,GACJqC,EAAKpI,MAAMgG,cAAcD,+CAgCb,IAAAsC,EACW3E,KAAKI,MAAxBhD,EADQuH,EACRvH,MAAOc,EADCyG,EACDzG,QACf,OACEF,EAAAC,EAAAnB,cAAAkB,EAAAC,EAAA2G,SAAA,KACG,CAAC,IAAK,qBAAqBzG,IAAI,SAAA0G,GAAI,OAClC7G,EAAAC,EAAAnB,cAACgI,EAAA,EAAD,CACEC,OAAK,EACL1G,IAAKwG,EACLA,KAAMA,EACNG,OAAQ,SAAAC,GAAU,OAChBjH,EAAAC,EAAAnB,cAACoI,EAADvI,OAAAwI,OAAA,CACEjH,QAASA,EACTd,MAAOA,GACH6H,SAKZjH,EAAAC,EAAAnB,cAACgI,EAAA,EAAD,CACED,KAAK,gBACLG,OAAQ,SAAAC,GAAc,IACZzH,EAAWyH,EAAWG,MAAM5D,OAA5BhE,OACFE,EAAOP,EAASC,EAAOI,IAAW,GAClCY,EVxJQ,eAACF,EAADb,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAS,GAAIQ,EAAbR,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OACxBW,EAAQT,KAAK,SAAAW,GAAM,OAAIA,EAAOT,KAAOE,IUuJZwH,CAAWnH,EAASR,EAAKG,UACxC,OACEG,EAAAC,EAAAnB,cAACwI,EAAD3I,OAAAwI,OAAA,GACMF,EADN,CAEE7G,OAAQA,QAKhBJ,EAAAC,EAAAnB,cAACgI,EAAA,EAAD,CACED,KAAK,cACLU,UAAWzG,IAEbd,EAAAC,EAAAnB,cAACgI,EAAA,EAAD,CACED,KAAK,YACLU,UAAWzG,gDAMA,IAAA0G,EAAAxF,KAAAyF,EACUzF,KAAKI,MAAxBhD,EADSqI,EACTrI,MAAOc,EADEuH,EACFvH,QACf,OACEF,EAAAC,EAAAnB,cAAAkB,EAAAC,EAAA2G,SAAA,KACG,CAAC,IAAK,qBAAqBzG,IAAI,SAAA0G,GAAI,OAClC7G,EAAAC,EAAAnB,cAACgI,EAAA,EAAD,CACEC,OAAK,EACL1G,IAAKwG,EACLA,KAAMA,EACNG,OAAQ,SAAAC,GAAc,IACZpH,EAAaoH,EAAWG,MAAM5D,OAA9B3D,SACF6H,EVlLa,eAACtI,EAADC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAO,GAAIQ,EAAXR,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OAC7BM,EAEET,EAAMU,OAAO,SAAAJ,GAAI,OAAIA,EAAKG,WAAaA,IADvCT,EUgL+BuI,CAAkBvI,EAAOS,GAChD,OACEG,EAAAC,EAAAnB,cAAC8I,EAADjJ,OAAAwI,OAAA,GACMF,EADN,CAEE7H,MAAOsI,UAMjB1H,EAAAC,EAAAnB,cAACgI,EAAA,EAAD,CACED,KAAK,gBACLG,OAAQ,SAAAC,GAAc,IACZzH,EAAWyH,EAAWG,MAAM5D,OAA5BhE,OACFE,EAAOP,EAASC,EAAOI,GAC7B,OACEQ,EAAAC,EAAAnB,cAAC+I,EAADlJ,OAAAwI,OAAA,GACMF,EADN,CAEEvH,KAAMA,QAKdM,EAAAC,EAAAnB,cAACgI,EAAA,EAAD,CACED,KAAK,cACLG,OAAW,SAAAC,GACT,OACEjH,EAAAC,EAAAnB,cAACgJ,EAADnJ,OAAAwI,OAAA,CAAW7C,cAAiBkD,EAAKlD,cAC7ByD,WAAaP,EAAKO,WAClBlC,aAAgB2B,EAAK1E,gBACjBmE,EAHR,CAII/G,QAAWA,QAOrBF,EAAAC,EAAAnB,cAACgI,EAAA,EAAD,CACED,KAAK,YACLG,OAAQ,SAAAC,GACN,OACEjH,EAAAC,EAAAnB,cAACkJ,EAADrJ,OAAAwI,OAAA,CACE/B,YAAeoC,EAAKpC,YACpB2C,WAAcP,EAAKO,WACnBlC,aAAgB2B,EAAK3B,cACjBoB,EAJN,CAKE/G,QAASA,0CAQrB,OACEF,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,OACbwB,EAAAC,EAAAnB,cAAA,OAAKN,UAAU,YACZwD,KAAKiG,mBAERjI,EAAAC,EAAAnB,cAAA,UAAQN,UAAU,eAChBwB,EAAAC,EAAAnB,cAAA,UACEkB,EAAAC,EAAAnB,cAAC4B,EAAA,EAAD,CAAMH,GAAG,KAAT,WACC,IACDP,EAAAC,EAAAnB,cAAC8B,EAAA,EAAD,CAAiBC,KAAK,mBAG1Bb,EAAAC,EAAAnB,cAAA,QAAMN,UAAU,aACbwD,KAAKkG,4BAhPE3F,aAsPH4F,cAAWnC,GCxP1BoC,IAAQC,IAAIC,IAAQC,IAAeC,IAAYC,KAE/CC,IAAS1B,OACPhH,EAAAC,EAAAnB,cAAC6J,EAAA,EAAD,KACE3I,EAAAC,EAAAnB,cAAC8J,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.33cdceb3.chunk.js","sourcesContent":["import React from 'react'\nimport './CircleButton.css'\n\nexport default function NavCircleButton(props) {\n  const { tag, className, childrenm, ...otherProps } = props\n\n  return React.createElement(\n    props.tag,\n    {\n      className: ['NavCircleButton', props.className].join(' '),\n      ...otherProps\n    },\n    props.children\n  )\n}\n\nNavCircleButton.defaultProps ={\n  tag: 'a',\n}\n","\nexport const findFolder = (folders=[], folderId) =>\n  folders.find(folder => folder.id === folderId)\n\nexport const findNote = (notes=[], noteId) =>\n  notes.find(note => note.id === noteId)\n\nexport const getNotesForFolder = (notes=[], folderId) => (\n  (!folderId)\n    ? notes\n    : notes.filter(note => note.folderId === folderId)\n)\n\nexport const countNotesForFolder = (notes=[], folderId) =>\n  notes.filter(note => note.folderId === folderId).length\n","import React from 'react'\nimport { NavLink, Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport CircleButton from '../CircleButton/CircleButton'\nimport { countNotesForFolder } from '../notes-helpers'\nimport './NoteListNav.css'\nimport propTypes from 'prop-types';\n\n\nexport default function NoteListNav(props) {\n  //console.log('the NotesListNav prop is:' + props.notes)\n  return (\n    <div className='NoteListNav'>\n      <ul className='NoteListNav__list'>\n        {props.folders.map(folder =>\n          <li key={folder.id}>\n            <NavLink\n              className='NoteListNav__folder-link'\n              to={`/folder/${folder.id}`}\n            >\n              <span className='NoteListNav__num-notes'>\n                {countNotesForFolder(props.notes, folder.id)}\n              </span>\n              {folder.name}\n            </NavLink>\n          </li>\n        )}\n      </ul>\n      <div className='NoteListNav__button-wrapper'>\n        <CircleButton\n          tag={Link}\n          to='/add-folder'\n          type='button'\n          className='NoteListNav__add-folder-button'\n        >\n          <FontAwesomeIcon icon='plus' />\n          <br />\n          Folder\n        </CircleButton>\n      </div>\n    </div>\n  )\n}\n\nNoteListNav.defaultProps = {\n  folders: []\n}\n\nNoteListNav.propTypes = {\n  name: propTypes.string.isRequired,\n  notes: propTypes.string,\n  id: propTypes.number.isRequired\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport CircleButton from '../CircleButton/CircleButton'\nimport './NotePageNav.css'\nimport propTypes from 'prop-types'\n\n\nexport default function NotePageNav(props) {\n  return (\n    <div className='NotePageNav'>\n      <CircleButton\n        tag='button'\n        role='link'\n        onClick={() => props.history.goBack()}\n        className='NotePageNav__back-button'\n      >\n        <FontAwesomeIcon icon='chevron-left' />\n        <br />\n        Back\n      </CircleButton>\n      {props.folder && (\n        <h3 className='NotePageNav__folder-name'>\n          {props.folder.name}\n        </h3>\n      )}\n    </div>\n  )\n}\n\nNotePageNav.defaultProps = {\n  history: {\n    goBack: () => {}\n  }\n}\n\nNotePageNav.propTypes = {\n  name: propTypes.string.isRequired\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { format } from 'date-fns'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './Note.css'\n\nexport default function Note(props) {\n  return (\n    <div className='Note'>\n      <h2 className='Note__title'>\n        <Link to={`/note/${props.id}`}>\n          {props.name}\n        </Link>\n      </h2>\n      <button className='Note__delete' type='button'>\n        <FontAwesomeIcon icon='trash-alt' />\n        {' '}\n        remove\n      </button>\n      <div className='Note__dates'>\n        <div className='Note__dates-modified'>\n          Modified\n          {' '}\n          <span className='Date'>\n            {format(props.modified, 'Do MMM YYYY')}\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport Note from '../Note/Note'\nimport CircleButton from '../CircleButton/CircleButton'\nimport './NoteListMain.css'\nimport propTypes from 'prop-types';\n\n\nexport default function NoteListMain(props) {\n  //console.log('the NoteListMain got this prop: ' + props.notes)\n  return (\n    <section className='NoteListMain'>\n      <ul>\n        {props.notes.map(note =>\n          <li key={note.id}>\n            <Note\n              id={note.id}\n              name={note.name}\n              modified={note.modified}\n            />\n          </li>\n        )}\n      </ul>\n      <div className='NoteListMain__button-container'>\n        <CircleButton\n          tag={Link}\n          to='/add-note'\n          type='button'\n          className='NoteListMain__add-note-button'\n        >\n          <FontAwesomeIcon icon='plus' />\n          <br />\n          Note\n        </CircleButton>\n      </div>\n    </section>\n  )\n}\n\nNoteListMain.defaultProps = {\n  notes: [],\n}\n\nNoteListMain.propTypes = {\n  name: propTypes.string.isRequired,\n  date: propTypes.instanceOf(Date).isRequired,\n  id: propTypes.number.isRequired\n}","import React from 'react'\nimport Note from '../Note/Note'\nimport './NotePageMain.css'\nimport propTypes from 'prop-types';\n\nexport default function NotePageMain(props) {\n  return (\n    <section className='NotePageMain'>\n      <Note\n        id={props.note.id}\n        name={props.note.name}\n        modified={props.note.modified}\n      />\n      <div className='NotePageMain__content'>\n        {props.note.content.split(/\\n \\r|\\n/).map((para, i) =>\n          <p key={i}>{para}</p>\n        )}\n      </div>\n    </section>\n  )\n}\n\nNotePageMain.defaultProps = {\n  note: {\n    content: '',\n  }\n}\n\nNotePageMain.propTypes = {\n  name: propTypes.string.isRequired,\n  id: propTypes.number.isRequired,\n  modified: propTypes.instanceOf(Date).isRequired\n}\n\n","import React, {Component} from 'react'\n\nexport default class FolderErrorBoundries extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n        \n    }\n    static getDerivedStateFromError(error) {\n        return( {hasError: true} )\n    }\n\n    render(){\n        if (this.state.hasError){\n           return(\n            <h2>There has been an error in your request. Please double check to make sure that you didn't buff it</h2>\n            )\n        }\n        return this.props.children\n    }\n}","import React, { Component } from 'react';\n//import NotefulForm from '../NotefulForm/NotefulForm';\nimport './AddFolder.css';\nimport FolderErrorBoundries from './FolderErrorBoundries';\nimport propTypes from 'prop-types';\n\nexport default class AddFolder extends Component {\n  constructor(props){\n    super(props);\n    this.state = {value: ''};\n  this.handleChange = this.handleChange.bind(this);\n  this.handleSubmit = this.handleSubmit.bind(this);\n  this.newAddedFolder = this.newAddedFolder.bind(this)\n  }\n  \n  handleChange(e){\n    this.setState({\n      value: e.target.value\n    })\n  }\n  \n  handleSubmit(e){\n    e.preventDefault();\n    const folderName = this.state.value;\n    console.log('the folder name is: ' + folderName)\n    this.newAddedFolder(folderName)\n  }\n\n  newAddedFolder(newFolder) {\n    console.log(newFolder)\n    const folderUrl = 'http://localhost:9090/folders'\n      const params = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({name: newFolder})\n      }\n      console.log(newFolder)\n      fetch(folderUrl, params)\n      .then(response =>{\n        if (!response.ok){\n          throw new Error('Something went wrong, try again later')\n        }\n        return (response.json())\n        \n      })\n      .then(data => {\n        this.props.updateFolders(data)\n      })\n      .catch(error => {\n        'Something went wrong with posting the new folder. Try again later'\n      })\n  }\n    render() {\n    return (\n      <section className='AddFolder'>\n        <h2>Create a folder</h2>\n        {/*<NotefulForm>*/}\n        <FolderErrorBoundries>\n          <form onSubmit = {e => this.handleSubmit(e)}>\n            <div className='field'>\n                <label htmlFor='folder-name-input' value='name'>\n                Name\n              </label>\n              <input type='text' id='folder-name-input' name='folder-name-input' value={this.state.value} onChange={this.handleChange} required/>\n            </div>\n            <div className='buttons'>\n              <button type='submit'>\n                Add folder\n              </button>\n            </div>\n          </form>\n        </FolderErrorBoundries>\n        {/*</NotefulForm>*/}\n      </section>\n    )\n  }  \n}\n\nAddFolder.propTypes = {\n  value: propTypes.string.isRequired\n}","import React, {Component} from 'react'\n\nexport default class NoteErrorBoundries extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    static getDerivedStateFromError(error){\n        return ( {hasError: true} );\n    }\n    \n    render(){\n        if (this.state.hasError){\n            return(\n                <h2>Something went wrong and its probably your fault. Try again later!</h2>\n            )\n        }\n        return this.props.children\n    }\n} ","import React, { Component } from 'react'\n//import NotefulForm from '../NotefulForm/NotefulForm'\nimport './AddNote.css'\nimport NoteErrorBoundries from './NoteErrorBoundries';\nimport propTypes from 'prop-types';\nimport {withRouter} from 'react-router-dom';\n\nexport default class AddNote extends Component {\n  static defaultProps = {\n    folders: [],\n  }\n  constructor(props){\n    super(props);\n    this.state = {\n      name: '',\n      content: '',\n      selectedFolder: ''\n    };\n    this.handleNameChange = this.handleNameChange.bind(this)\n    this.handleContentChange = this.handleContentChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    //this.backToHome = this.backToHome.bind(this)\n    //this.submitAndGoHome = this.submitAndGoHome.bind(this)\n  }\n  handleNameChange(e){\n    this.setState({\n      name: e.target.value,\n    })\n  }\n  handleContentChange(e){\n    this.setState({\n      content: e.target.value\n    })\n  }\n  onFolderSelect(e){\n    this.setState({\n      selectedFolder: e.target.value\n    })\n  }\n\n // backToHome(e){\n   // this.props.history.push('/')\n  //}\n\n  newAddedNote(newNote) {\n    const notesUrl = 'http://localhost:9090/notes';\n    const params = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newNote)\n    }\n    fetch(notesUrl, params)\n    .then(response => {\n      if(!response.ok){\n        throw new Error('Something went wrong, try again later')\n      }\n      return (response.json());\n    })\n    .then(data => {\n        this.props.updateNotes(data) // lets call this function\n    })\n    .catch(error => {\n      alert('Something went wrong. Try again later')\n    })\n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n    //console.log(this.props.folders)\n    const nameValue = this.state.name\n    const contentValue = this.state.content\n    const time = new Date()\n    const folderIdValue = this.state.selectedFolder\n    console.log(folderIdValue);\n    const testing = {nameValue, contentValue, time, folderIdValue}\n    console.log('this is the title of the note: ' + nameValue + \n    ' , and its contents are as follows: ' + contentValue + \n    ' , and the time is: ' + time + \n    ' , and the folder id is: ' + folderIdValue);\n    const testingTwo = {\n      \"folderId\": testing.folderIdValue,\n      \"name\": testing.nameValue,\n      \"modified\": testing.time,\n      \"content\": testing.contentValue\n    }\n    if (folderIdValue === ''){\n      alert('please select a folder' )\n    } else (\n      this.newAddedNote(testingTwo)\n    )\n    \n  }\n\n  //submitAndGoHome(e){\n  //  this.handleSubmit(e)\n  //  this.backToHome(e)\n  //}\n\n\n  render() {\n    const { folders } = this.props\n    return (\n      <section className='AddNote'>\n        <h2>Create a note</h2>\n        {/*<NotefulForm>*/}\n        <NoteErrorBoundries>\n          <form onSubmit = {e => this.handleSubmit(e)}>\n            <div className='field'>\n              <label htmlFor='note-name-input'>\n                Name\n              </label>\n              <input type='text' id='note-name-input' name={this.state.name} onChange = {e => this.handleNameChange(e)} required/>\n            </div>\n            <div className='field'>\n              <label htmlFor='note-content-input'>\n                Content\n              </label>\n              <textarea id='note-content-input' content={this.state.content} onChange = {e => this.handleContentChange(e)} required/>\n            </div>\n            <div className='field'>\n              <label htmlFor='note-folder-select'>\n                Folder\n              </label>\n              <select required id='note-folder-select' onChange = {e => this.onFolderSelect(e)} selectedFolder={this.state.selectedFolder}>\n                <option value={null}>...</option>\n                {folders.map(folder =>\n                  <option key={folder.id} value={folder.id}>\n                    {folder.name}\n                  </option>\n                )}\n              </select>\n            </div>\n            <div className='buttons'>\n              <button type='submit'>\n                Add note\n              </button>\n            </div>\n          </form>\n        </NoteErrorBoundries>\n\n      {/*</NotefulForm>*/}\n      </section>\n          \n    )\n  }\n}\n\nAddNote.propTypes = {\n  nameValue: propTypes.string,\n  contentValue: propTypes.string,\n  folderIdValue: propTypes.number.isRequired\n}","import React, { Component } from 'react'\nimport { Route, Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport NoteListNav from '../NoteListNav/NoteListNav'\nimport NotePageNav from '../NotePageNav/NotePageNav'\nimport NoteListMain from '../NoteListMain/NoteListMain'\nimport NotePageMain from '../NotePageMain/NotePageMain'\nimport AddFolder from '../AddFolder/AddFolder'\nimport AddNote from '../AddNote/AddNote'\nimport { getNotesForFolder, findNote, findFolder } from '../notes-helpers'\nimport './App.css'\nimport {withRouter} from 'react-router-dom';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    \n    //this.newAddedFolder = this.newAddedFolder.bind(this)\n    //this.newAddedNote = this.newAddedNote.bind(this)\n    this.updateFolders = this.updateFolders.bind(this)\n    this.updateNotes = this.updateNotes.bind(this)\n\n}\nstate = {\n      notes: [],\n      folders: [],\n    }\n\n  componentDidMount(){\n    fetch('http://localhost:9090/folders')\n      .then(response => response.json())\n      .then(data =>{ \n        const getFolders = data\n        this.setState({\n          folders: getFolders\n        })\n      })\n      .catch(error => {\n        console.log('idk whats up with the folders, try again later #catch')\n      })\n      fetch('http://localhost:9090/notes')\n      .then(response => response.json())\n      .then(data => {\n        const getNotes = data\n        this.setState({\n          notes: getNotes\n        })\n      })\n      .catch(error => {\n        console.log('idk whats up with the notes, try again later #catch')\n        console.log(error)\n      })\n  }\n\n  newAddedNote(newNote) {\n    const notesUrl = 'http://localhost:9090/notes';\n    const params = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newNote)\n    }\n    fetch(notesUrl, params)\n    .then(response => {\n      if(!response.ok){\n        throw new Error('Something went wrong, try again later')\n      }\n      return (response.json());\n    })\n    .then(data => {\n      this.setState({note: [...this.state.notes, data]});\n    })\n    .then(e => {\n        this.props.history.push('/add')\n    })\n    .catch(error => {\n      alert('Something went wrong. Try again later')\n    })\n  } \n\n  newAddedFolder(newFolder) {\n    const folderUrl = 'http://localhost:9090/folders'\n      const params = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newFolder)\n      }\n      fetch(folderUrl, params)\n      .then(response =>{\n        if (!response.ok){\n          throw new Error('Something went wrong, try again later')\n        }\n        return (response.json())\n      })\n      .then(data => {\n        this.props.updateFolders(data)\n      })\n  }\n  updateFolders = (newFolders) => {\n    let foldersClone  = JSON.parse(JSON.stringify(this.state.folders))\n    foldersClone.push(newFolders)\n    this.setState({\n      folders: foldersClone\n    }, () => {\n      this.props.history.push('/')\n    })\n  }\n\n  handleAddNote = (newNote) => {\n    this.setState({\n      'id': '',\n      'name': '',\n      'folder': '',\n      'content': ''\n    })\n  }\n\n  updateNotes = (newNote) => {\n    let notesClone = JSON.parse(JSON.stringify(this.state.notes))\n    notesClone.push(newNote) \n    this.setState({\n         notes: notesClone\n    }, () => {\n        this.props.history.push('/')\n    })\n}\n\n  renderNavRoutes() {\n    const { notes, folders } = this.state\n    return (\n      <>\n        {['/', '/folder/:folderId'].map(path =>\n          <Route\n            exact\n            key={path}\n            path={path}\n            render={routeProps =>\n              <NoteListNav\n                folders={folders}\n                notes={notes}\n                {...routeProps}\n              />\n            }\n          />\n        )}\n        <Route\n          path='/note/:noteId'\n          render={routeProps => {\n            const { noteId } = routeProps.match.params\n            const note = findNote(notes, noteId) || {}\n            const folder = findFolder(folders, note.folderId)\n            return (\n              <NotePageNav\n                {...routeProps}\n                folder={folder}\n              />\n            )\n          }}\n        />\n        <Route\n          path='/add-folder'\n          component={NotePageNav}\n        />\n        <Route\n          path='/add-note'\n          component={NotePageNav}\n        />\n      </>\n    )\n  }\n\n  renderMainRoutes() {\n    const { notes, folders } = this.state\n    return(\n      <>\n        {['/', '/folder/:folderId'].map(path =>\n          <Route\n            exact\n            key={path}\n            path={path}\n            render={routeProps => {\n              const { folderId } = routeProps.match.params\n              const notesForFolder = getNotesForFolder(notes, folderId)\n              return (\n                <NoteListMain\n                  {...routeProps}\n                  notes={notesForFolder}\n                />\n              )\n            }}\n          />\n        )}\n        <Route\n          path='/note/:noteId'\n          render={routeProps => {\n            const { noteId } = routeProps.match.params\n            const note = findNote(notes, noteId)\n            return (\n              <NotePageMain\n                {...routeProps}\n                note={note}\n              />\n            )\n          }}\n        />\n        <Route\n          path='/add-folder'\n          render =  {routeProps => {\n            return(\n              <AddFolder updateFolders = {this.updateFolders}\n                  getRequest= {this.getRequest}\n                  newAddedNote = {this.newAddedFolder}\n                  {...routeProps}\n                  folders = {folders}\n                 />\n            )\n            \n          }     \n           }\n          />\n        <Route\n          path='/add-note'\n          render={routeProps => {\n            return (\n              <AddNote \n                updateNotes = {this.updateNotes } \n                getRequest = {this.getRequest} \n                newAddedNote = {this.newAddedNote}\n                {...routeProps}\n                folders={folders}\n              />\n            )\n          }}\n        />\n      </>\n    )}\n  render() {\n    return (\n      <div className='App'>\n        <nav className='App__nav'>\n          {this.renderNavRoutes()}\n        </nav>\n        <header className='App__header'>\n          <h1>\n            <Link to='/'>Noteful</Link>\n            {' '}\n            <FontAwesomeIcon icon='check-double' />\n          </h1>\n        </header>\n        <main className='App__main'>\n          {this.renderMainRoutes()}\n        </main>\n      </div>\n    )\n  }\n}\nexport default withRouter(App)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faPlus, faChevronLeft, faTrashAlt, faCheckDouble\n} from '@fortawesome/free-solid-svg-icons'\nimport { BrowserRouter } from 'react-router-dom'\nimport 'typeface-roboto'\nimport './index.css'\nimport App from './App/App'\n\nlibrary.add(faPlus, faChevronLeft, faTrashAlt, faCheckDouble)\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}